{"abi":[{"type":"function","name":"readByteRange","inputs":[{"name":"byte_range_index","type":"uint8","internalType":"uint8"},{"name":"start_offset","type":"uint32","internalType":"uint32"},{"name":"length","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"data","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"readByteRange","inputs":[{"name":"byte_range_index","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"data","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"readBytes","inputs":[{"name":"relative_offset","type":"uint32","internalType":"uint32"},{"name":"length","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"result","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"readBytes","inputs":[],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"data","type":"bytes","internalType":"bytes"}],"stateMutability":"view"}],"bytecode":{"object":"0x6080604052348015600f57600080fd5b506103908061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631660d3f814610051578063819a78181461007b578063a98ce76d1461008e578063d98b5568146100a1575b600080fd5b61006461005f366004610246565b6100a9565b6040516100729291906102ad565b60405180910390f35b6100646100893660046102e9565b61015c565b61006461009c36600461030b565b6101eb565b610064610206565b604051600160f81b60208201526001600160f81b031960f885901b1660218201526001600160e01b031960e084811b8216602284015283901b16602682015260009060609061050090602a0160408051601f198184030181529082905261010f9161033e565b600060405180830381855afa9150503d806000811461014a576040519150601f19603f3d011682016040523d82523d6000602084013e61014f565b606091505b5091509150935093915050565b6040516000602082018190526001600160f81b031960f884901b166021830152906060906105009060220160408051601f19818403018152908290526101a19161033e565b600060405180830381855afa9150503d80600081146101dc576040519150601f19603f3d011682016040523d82523d6000602084013e6101e1565b606091505b5091509150915091565b600060606101fb600085856100a9565b915091509250929050565b60006060610214600061015c565b915091509091565b803560ff8116811461022d57600080fd5b919050565b803563ffffffff8116811461022d57600080fd5b60008060006060848603121561025b57600080fd5b6102648461021c565b925061027260208501610232565b915061028060408501610232565b90509250925092565b60005b838110156102a457818101518382015260200161028c565b50506000910152565b821515815260406020820152600082518060408401526102d4816060850160208701610289565b601f01601f1916919091016060019392505050565b6000602082840312156102fb57600080fd5b6103048261021c565b9392505050565b6000806040838503121561031e57600080fd5b61032783610232565b915061033560208401610232565b90509250929050565b60008251610350818460208701610289565b919091019291505056fea2646970667358221220417f8a883d96d566bf25c9186d065940f9b3e5d125f9d59c1d063a57b860116564736f6c634300081a0033","sourceMap":"285:4838:2:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631660d3f814610051578063819a78181461007b578063a98ce76d1461008e578063d98b5568146100a1575b600080fd5b61006461005f366004610246565b6100a9565b6040516100729291906102ad565b60405180910390f35b6100646100893660046102e9565b61015c565b61006461009c36600461030b565b6101eb565b610064610206565b604051600160f81b60208201526001600160f81b031960f885901b1660218201526001600160e01b031960e084811b8216602284015283901b16602682015260009060609061050090602a0160408051601f198184030181529082905261010f9161033e565b600060405180830381855afa9150503d806000811461014a576040519150601f19603f3d011682016040523d82523d6000602084013e61014f565b606091505b5091509150935093915050565b6040516000602082018190526001600160f81b031960f884901b166021830152906060906105009060220160408051601f19818403018152908290526101a19161033e565b600060405180830381855afa9150503d80600081146101dc576040519150601f19603f3d011682016040523d82523d6000602084013e6101e1565b606091505b5091509150915091565b600060606101fb600085856100a9565b915091509250929050565b60006060610214600061015c565b915091509091565b803560ff8116811461022d57600080fd5b919050565b803563ffffffff8116811461022d57600080fd5b60008060006060848603121561025b57600080fd5b6102648461021c565b925061027260208501610232565b915061028060408501610232565b90509250925092565b60005b838110156102a457818101518382015260200161028c565b50506000910152565b821515815260406020820152600082518060408401526102d4816060850160208701610289565b601f01601f1916919091016060019392505050565b6000602082840312156102fb57600080fd5b6103048261021c565b9392505050565b6000806040838503121561031e57600080fd5b61032783610232565b915061033560208401610232565b90509250929050565b60008251610350818460208701610289565b919091019291505056fea2646970667358221220417f8a883d96d566bf25c9186d065940f9b3e5d125f9d59c1d063a57b860116564736f6c634300081a0033","sourceMap":"285:4838:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3401:488;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;2189:397;;;;;;:::i;:::-;;:::i;1357:201::-;;;;;;:::i;:::-;;:::i;689:115::-;;;:::i;3401:488::-;3661:207;;-1:-1:-1;;;3661:207:2;;;2062:39:3;-1:-1:-1;;;;;;3695:31:2;3748:24;;;2130:26:3;2117:11;;;2110:47;-1:-1:-1;;;;;;3794:20:2;;;;2186:33:3;;2173:11;;;2166:54;3836:14:2;;;2249:33:3;2236:11;;;2229:54;3535:12:2;;3549:17;;112:5:1;;2299:12:3;;3661:207:2;;;-1:-1:-1;;3661:207:2;;;;;;;;;;3597:285;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3578:304;;;;3401:488;;;;;;:::o;2189:397::-;2439:126;;2271:12;2439:126;;;2767:39:3;;;-1:-1:-1;;;;;;2473:28:2;2523:24;;;2835:26:3;2822:11;;;2815:47;2271:12:2;2285:17;;112:5:1;;2878:11:3;;2439:126:2;;;-1:-1:-1;;2439:126:2;;;;;;;;;;2375:204;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2314:265;;;;2189:397;;;:::o;1357:201::-;1458:12;1472:19;1510:41;1524:1;1527:15;1544:6;1510:13;:41::i;:::-;1503:48;;;;1357:201;;;;;:::o;689:115::-;731:12;745:17;781:16;795:1;781:13;:16::i;:::-;774:23;;;;689:115;;:::o;14:156:3:-;80:20;;140:4;129:16;;119:27;;109:55;;160:1;157;150:12;109:55;14:156;;;:::o;175:163::-;242:20;;302:10;291:22;;281:33;;271:61;;328:1;325;318:12;343:326;416:6;424;432;485:2;473:9;464:7;460:23;456:32;453:52;;;501:1;498;491:12;453:52;524:27;541:9;524:27;:::i;:::-;514:37;;570;603:2;592:9;588:18;570:37;:::i;:::-;560:47;;626:37;659:2;648:9;644:18;626:37;:::i;:::-;616:47;;343:326;;;;;:::o;674:250::-;759:1;769:113;783:6;780:1;777:13;769:113;;;859:11;;;853:18;840:11;;;833:39;805:2;798:10;769:113;;;-1:-1:-1;;916:1:3;898:16;;891:27;674:250::o;929:475::-;1112:6;1105:14;1098:22;1087:9;1080:41;1157:2;1152;1141:9;1137:18;1130:30;1061:4;1189:6;1183:13;1232:6;1227:2;1216:9;1212:18;1205:34;1248:79;1320:6;1315:2;1304:9;1300:18;1295:2;1287:6;1283:15;1248:79;:::i;:::-;1388:2;1367:15;-1:-1:-1;;1363:29:3;1348:45;;;;1395:2;1344:54;;929:475;-1:-1:-1;;;929:475:3:o;1409:182::-;1466:6;1519:2;1507:9;1498:7;1494:23;1490:32;1487:52;;;1535:1;1532;1525:12;1487:52;1558:27;1575:9;1558:27;:::i;:::-;1548:37;1409:182;-1:-1:-1;;;1409:182:3:o;1596:256::-;1662:6;1670;1723:2;1711:9;1702:7;1698:23;1694:32;1691:52;;;1739:1;1736;1729:12;1691:52;1762:28;1780:9;1762:28;:::i;:::-;1752:38;;1809:37;1842:2;1831:9;1827:18;1809:37;:::i;:::-;1799:47;;1596:256;;;;;:::o;2322:287::-;2451:3;2489:6;2483:13;2505:66;2564:6;2559:3;2552:4;2544:6;2540:17;2505:66;:::i;:::-;2587:16;;;;;2322:287;-1:-1:-1;;2322:287:3:o","linkReferences":{}},"methodIdentifiers":{"readByteRange(uint8)":"819a7818","readByteRange(uint8,uint32,uint32)":"1660d3f8","readBytes()":"d98b5568","readBytes(uint32,uint32)":"a98ce76d"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"byte_range_index\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"start_offset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"length\",\"type\":\"uint32\"}],\"name\":\"readByteRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"byte_range_index\",\"type\":\"uint8\"}],\"name\":\"readByteRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"relative_offset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"length\",\"type\":\"uint32\"}],\"name\":\"readBytes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readBytes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"readByteRange(uint8)\":{\"custom:precompile\":\"Calls PD_READ_PRECOMPILE_ADDRESS with READ_FULL_BYTE_RANGE operation\",\"details\":\"Note that \\\"by index\\\" means the index in the list of ByteRanges, from the access list with all other types filtered out.\",\"params\":{\"byte_range_index\":\"The index of the BytesRange in the access list to read from (0-255)\"},\"returns\":{\"data\":\"The complete bytes from the specified BytesRange. If success is false, this will be empty\",\"success\":\"Boolean indicating whether the read operation was successful\"}},\"readByteRange(uint8,uint32,uint32)\":{\"custom:precompile\":\"Calls PD_READ_PRECOMPILE_ADDRESS with READ_PARTIAL_BYTE_RANGE operation\",\"details\":\"Note that \\\"by index\\\" means the index in the list of ByteRanges, from the access list with all other types filtered out.\",\"params\":{\"byte_range_index\":\"The index of the BytesRange in the access list to read from (0-255)\",\"length\":\"The number of bytes to read from the BytesRange\",\"start_offset\":\"The starting position within the BytesRange to begin reading, in bytes\"},\"returns\":{\"data\":\"The bytes that were read from the BytesRange. If success is false, this will be empty\",\"success\":\"Boolean indicating whether the read operation was successful\"}},\"readBytes()\":{\"details\":\"Convenience method that calls readByteRange(0) to read the entire first range\",\"returns\":{\"data\":\"The complete bytes from the first BytesRange. If success is false, this will be empty\",\"success\":\"Boolean indicating whether the read operation was successful\"}},\"readBytes(uint32,uint32)\":{\"details\":\"Convenience method that calls readByteRange(0, offset, length)\",\"params\":{\"length\":\"The number of bytes to read from the BytesRange\",\"relative_offset\":\"The starting position within the BytesRange to begin reading, in bytes\"},\"returns\":{\"result\":\"The bytes that were read from the BytesRange. If success is false, this will be empty\",\"success\":\"Boolean indicating whether the read operation was successful\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"readByteRange(uint8)\":{\"notice\":\"Reads all bytes from a specified (by index) BytesRange in the access list\"},\"readByteRange(uint8,uint32,uint32)\":{\"notice\":\"Reads a specified number of bytes from a specified (by index) BytesRange in the access list\"},\"readBytes()\":{\"notice\":\"Reads all bytes from the first BytesRange in the access list\"},\"readBytes(uint32,uint32)\":{\"notice\":\"Reads a specified number of bytes from the first BytesRange in the access list\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ProgrammableData.sol\":\"ProgrammableData\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/Precompiles.sol\":{\"keccak256\":\"0xbf0975b6dace576d0bef5544daf8483ba5107bd0cba9212e818d8f3a942ade2c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a799d0925459a3c1d2028af22421ee5ae8bf540863a8cf7bb98de37732d7d45d\",\"dweb:/ipfs/QmcRBmR45EJpbZsbLaN6koPm5bEwc2o3SYDDuKATFyZz2x\"]},\"src/ProgrammableData.sol\":{\"keccak256\":\"0x9c76782ba0d86174bf05f0baceb98ec70bd4bfa6ee8bfbd3818fd3ca935264b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://14713cb3c2027c2133991a033d261669fd9fa1dd49b366100bb5b7e169d510ae\",\"dweb:/ipfs/QmSikmiZ5PvFfLWZNdsEv8Vh7kJgMWX6e4Z2hWP5Lt8FGM\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint8","name":"byte_range_index","type":"uint8"},{"internalType":"uint32","name":"start_offset","type":"uint32"},{"internalType":"uint32","name":"length","type":"uint32"}],"stateMutability":"view","type":"function","name":"readByteRange","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}]},{"inputs":[{"internalType":"uint8","name":"byte_range_index","type":"uint8"}],"stateMutability":"view","type":"function","name":"readByteRange","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}]},{"inputs":[{"internalType":"uint32","name":"relative_offset","type":"uint32"},{"internalType":"uint32","name":"length","type":"uint32"}],"stateMutability":"view","type":"function","name":"readBytes","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"result","type":"bytes"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"readBytes","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}]}],"devdoc":{"kind":"dev","methods":{"readByteRange(uint8)":{"custom:precompile":"Calls PD_READ_PRECOMPILE_ADDRESS with READ_FULL_BYTE_RANGE operation","details":"Note that \"by index\" means the index in the list of ByteRanges, from the access list with all other types filtered out.","params":{"byte_range_index":"The index of the BytesRange in the access list to read from (0-255)"},"returns":{"data":"The complete bytes from the specified BytesRange. If success is false, this will be empty","success":"Boolean indicating whether the read operation was successful"}},"readByteRange(uint8,uint32,uint32)":{"custom:precompile":"Calls PD_READ_PRECOMPILE_ADDRESS with READ_PARTIAL_BYTE_RANGE operation","details":"Note that \"by index\" means the index in the list of ByteRanges, from the access list with all other types filtered out.","params":{"byte_range_index":"The index of the BytesRange in the access list to read from (0-255)","length":"The number of bytes to read from the BytesRange","start_offset":"The starting position within the BytesRange to begin reading, in bytes"},"returns":{"data":"The bytes that were read from the BytesRange. If success is false, this will be empty","success":"Boolean indicating whether the read operation was successful"}},"readBytes()":{"details":"Convenience method that calls readByteRange(0) to read the entire first range","returns":{"data":"The complete bytes from the first BytesRange. If success is false, this will be empty","success":"Boolean indicating whether the read operation was successful"}},"readBytes(uint32,uint32)":{"details":"Convenience method that calls readByteRange(0, offset, length)","params":{"length":"The number of bytes to read from the BytesRange","relative_offset":"The starting position within the BytesRange to begin reading, in bytes"},"returns":{"result":"The bytes that were read from the BytesRange. If success is false, this will be empty","success":"Boolean indicating whether the read operation was successful"}}},"version":1},"userdoc":{"kind":"user","methods":{"readByteRange(uint8)":{"notice":"Reads all bytes from a specified (by index) BytesRange in the access list"},"readByteRange(uint8,uint32,uint32)":{"notice":"Reads a specified number of bytes from a specified (by index) BytesRange in the access list"},"readBytes()":{"notice":"Reads all bytes from the first BytesRange in the access list"},"readBytes(uint32,uint32)":{"notice":"Reads a specified number of bytes from the first BytesRange in the access list"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/ProgrammableData.sol":"ProgrammableData"},"evmVersion":"paris","libraries":{}},"sources":{"src/Precompiles.sol":{"keccak256":"0xbf0975b6dace576d0bef5544daf8483ba5107bd0cba9212e818d8f3a942ade2c","urls":["bzz-raw://a799d0925459a3c1d2028af22421ee5ae8bf540863a8cf7bb98de37732d7d45d","dweb:/ipfs/QmcRBmR45EJpbZsbLaN6koPm5bEwc2o3SYDDuKATFyZz2x"],"license":"MIT"},"src/ProgrammableData.sol":{"keccak256":"0x9c76782ba0d86174bf05f0baceb98ec70bd4bfa6ee8bfbd3818fd3ca935264b9","urls":["bzz-raw://14713cb3c2027c2133991a033d261669fd9fa1dd49b366100bb5b7e169d510ae","dweb:/ipfs/QmSikmiZ5PvFfLWZNdsEv8Vh7kJgMWX6e4Z2hWP5Lt8FGM"],"license":"MIT"}},"version":1},"id":2}