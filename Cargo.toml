[workspace]
exclude = ["ext/"]
members = [
    "crates/c",
    "crates/irys-chain",
    "crates/irys-types",
    "crates/primitives",
    "crates/reth-node-bridge",
]
resolver = "2"
rust-version = "1.82"

[workspace.package]
edition = "2021"
rust-version = "1.82"

[workspace.dependencies]
actix = "0.13.5"
alloy-consensus = { path = "./ext/alloy/crates/consensus", default-features = false }
alloy-eips = { path = "./ext/alloy/crates/eips", default-features = false }
alloy-genesis = { path = "./ext/alloy/crates/genesis", default-features = false }
alloy-primitives = { path = "./ext/alloy-core/crates/primitives", default-features = false }
alloy-rlp = "0.3.4"
alloy-rpc-types = { path = "./ext/alloy/crates/rpc-types" }
alloy-rpc-types-engine = { path = "./ext/alloy/crates/rpc-types-engine" }
alloy-serde = { path = "./ext/alloy/crates/serde", default-features = false }
alloy-signer-local = { path = "./ext/alloy/crates/signer-local" }
arbitrary = "1.3"
bytes = "1.5"
derive_more = { version = "1", features = ["full"] }
futures = "0.3"
irys-primitives = { path = "./crates/primitives" }
modular-bitfield = "0.11.2"
openssl = { version = "0.10.57", features = ["vendored"] }
proptest-derive = "0.5"
serde = { version = "1.0", default-features = false }
serde_json = "1.0.94"
test-fuzz = "6"
thiserror = "1.0"

[patch.crates-io]
revm = { path = "./ext/revm/crates/revm" }
revm-primitives = { path = "./ext/revm/crates/primitives" }

# alloy
alloy = { path = "./ext/alloy/crates/alloy" }
alloy-consensus = { path = "./ext/alloy/crates/consensus" }
alloy-contract = { path = "./ext/alloy/crates/contract" }
alloy-eip7547 = { path = "./ext/alloy/crates/eip7547" }
alloy-eips = { path = "./ext/alloy/crates/eips" }
alloy-genesis = { path = "./ext/alloy/crates/genesis" }
alloy-json-rpc = { path = "./ext/alloy/crates/json-rpc" }
alloy-network = { path = "./ext/alloy/crates/network" }
alloy-network-primitives = { path = "./ext/alloy/crates/network-primitives" }
alloy-node-bindings = { path = "./ext/alloy/crates/node-bindings" }
alloy-provider = { path = "./ext/alloy/crates/provider" }
alloy-pubsub = { path = "./ext/alloy/crates/pubsub" }
alloy-rpc-client = { path = "./ext/alloy/crates/rpc-client" }
alloy-rpc-types = { path = "./ext/alloy/crates/rpc-types" }
alloy-rpc-types-admin = { path = "./ext/alloy/crates/rpc-types-admin" }
alloy-rpc-types-anvil = { path = "./ext/alloy/crates/rpc-types-anvil" }
alloy-rpc-types-beacon = { path = "./ext/alloy/crates/rpc-types-beacon" }
alloy-rpc-types-debug = { path = "./ext/alloy/crates/rpc-types-debug" }
alloy-rpc-types-engine = { path = "./ext/alloy/crates/rpc-types-engine" }
alloy-rpc-types-eth = { path = "./ext/alloy/crates/rpc-types-eth" }
alloy-rpc-types-mev = { path = "./ext/alloy/crates/rpc-types-mev" }
alloy-rpc-types-trace = { path = "./ext/alloy/crates/rpc-types-trace" }
alloy-rpc-types-txpool = { path = "./ext/alloy/crates/rpc-types-txpool" }
alloy-serde = { path = "./ext/alloy/crates/serde" }
alloy-signer = { path = "./ext/alloy/crates/signer" }
alloy-signer-aws = { path = "./ext/alloy/crates/signer-aws" }
alloy-signer-gcp = { path = "./ext/alloy/crates/signer-gcp" }
alloy-signer-ledger = { path = "./ext/alloy/crates/signer-ledger" }
alloy-signer-local = { path = "./ext/alloy/crates/signer-local" }
alloy-signer-trezor = { path = "./ext/alloy/crates/signer-trezor" }
alloy-transport = { path = "./ext/alloy/crates/transport" }
alloy-transport-http = { path = "./ext/alloy/crates/transport-http" }
alloy-transport-ipc = { path = "./ext/alloy/crates/transport-ipc" }
alloy-transport-ws = { path = "./ext/alloy/crates/transport-ws" }

# alloy-core
alloy-core = { path = "./ext/alloy-core/crates/core" }
alloy-dyn-abi = { path = "./ext/alloy-core/crates/dyn-abi" }
alloy-json-abi = { path = "./ext/alloy-core/crates/json-abi" }
alloy-primitives = { path = "./ext/alloy-core/crates/primitives" }
alloy-sol-macro = { path = "./ext/alloy-core/crates/sol-macro" }
alloy-sol-macro-expander = { path = "./ext/alloy-core/crates/sol-macro-expander" }
alloy-sol-macro-input = { path = "./ext/alloy-core/crates/sol-macro-input" }
alloy-sol-type-parser = { path = "./ext/alloy-core/crates/sol-type-parser" }
alloy-sol-types = { path = "./ext/alloy-core/crates/sol-types" }
syn-solidity = { path = "./ext/alloy-core/crates/syn-solidity" }


[workspace.lints]
rust.missing_debug_implementations = "warn"
rust.missing_docs = "warn"
rust.rust_2018_idioms = { level = "deny", priority = -1 }
rust.unreachable_pub = "warn"
rust.unused_must_use = "deny"
rustdoc.all = "warn"
# rust.unnameable-types = "warn"

[workspace.lints.clippy]
# These are some of clippy's nursery (i.e., experimental) lints that we like.
# By default, nursery lints are allowed. Some of the lints below have made good
# suggestions which we fixed. The others didn't have any findings, so we can
# assume they don't have that many false positives. Let's enable them to
# prevent future problems.
borrow_as_ptr = "warn"
branches_sharing_code = "warn"
clear_with_drain = "warn"
cloned_instead_of_copied = "warn"
collection_is_never_read = "warn"
derive_partial_eq_without_eq = "warn"
doc_markdown = "warn"
empty_line_after_doc_comments = "warn"
empty_line_after_outer_attr = "warn"
enum_glob_use = "warn"
equatable_if_let = "warn"
explicit_into_iter_loop = "warn"
explicit_iter_loop = "warn"
flat_map_option = "warn"
if_not_else = "warn"
implicit_clone = "warn"
imprecise_flops = "warn"
iter_on_empty_collections = "warn"
iter_on_single_items = "warn"
iter_with_drain = "warn"
iter_without_into_iter = "warn"
large_stack_frames = "warn"
manual_assert = "warn"
manual_clamp = "warn"
manual_is_variant_and = "warn"
manual_string_new = "warn"
match_same_arms = "warn"
missing_const_for_fn = "warn"
mutex_integer = "warn"
naive_bytecount = "warn"
needless_bitwise_bool = "warn"
needless_continue = "warn"
needless_for_each = "warn"
needless_pass_by_ref_mut = "warn"
nonstandard_macro_braces = "warn"
option_as_ref_cloned = "warn"
or_fun_call = "warn"
path_buf_push_overwrite = "warn"
read_zero_byte_vec = "warn"
redundant_clone = "warn"
redundant_else = "warn"
single_char_pattern = "warn"
string_lit_as_bytes = "warn"
string_lit_chars_any = "warn"
suboptimal_flops = "warn"
suspicious_operation_groupings = "warn"
trailing_empty_array = "warn"
trait_duplication_in_bounds = "warn"
transmute_undefined_repr = "warn"
trivial_regex = "warn"
tuple_array_conversions = "warn"
type_repetition_in_bounds = "warn"
uninhabited_references = "warn"
unnecessary_self_imports = "warn"
unnecessary_struct_initialization = "warn"
unnested_or_patterns = "warn"
unused_peekable = "warn"
unused_rounding = "warn"
use_self = "warn"
useless_let_if_seq = "warn"
while_float = "warn"
zero_sized_map_values = "warn"

# These are nursery lints which have findings. Allow them for now. Some are not
# quite mature enough for use in our codebase and some we don't really want.
# Explicitly listing should make it easier to fix in the future.
as_ptr_cast_mut = "allow"
cognitive_complexity = "allow"
debug_assert_with_mut_call = "allow"
fallible_impl_from = "allow"
future_not_send = "allow"
needless_collect = "allow"
non_send_fields_in_send_ty = "allow"
redundant_pub_crate = "allow"
significant_drop_in_scrutinee = "allow"
significant_drop_tightening = "allow"
too_long_first_doc_paragraph = "allow"
