[workspace]
exclude = ["ext/"]
members = [
  "crates/actors",
  "crates/c",
  "crates/chain",
  "crates/primitives",
  "crates/reth-node-bridge",
  "crates/types",
  "crates/packing",
  "crates/database",
  "crates/storage",
  "crates/testing-utils",
  "crates/config",
  "crates/efficient-sampling",
  "crates/macros",
  "crates/debug-utils",
  "xtask",
  "crates/price-oracle",
  "crates/cli",
]
resolver = "2"

[workspace.package]
edition = "2021"
rust-version = "1.85"
homepage = "http://irys.xyz/"
license = "MIT/Apache-2.0"
repository = "https://github.com/Irys-xyz/irys"
authors = []

[workspace.dependencies]
# Irys
irys-macros = { path = "./crates/macros" }
irys-database = { path = "./crates/database" }
irys-actors = { path = "./crates/actors" }
irys-api-server = { path = "./crates/api-server" }
irys-c = { path = "./crates/c" }
irys-primitives = { path = "./crates/primitives" }
irys-config = { path = "./crates/config" }
irys-reth-node-bridge = { path = "./crates/reth-node-bridge" }
irys-types = { path = "./crates/types" }
irys-storage = { path = "./crates/storage" }
irys-testing-utils = { path = "./crates/testing-utils" }
irys-packing = { path = "./crates/packing" }
irys-chain = { path = "./crates/chain" }
irys-vdf = { path = "./crates/vdf" }
irys-efficient-sampling = { path = "./crates/efficient-sampling" }
irys-price-oracle = { path = "./crates/price-oracle" }

ruint = { version = "1.12.3", features = ["alloc", "arbitrary"] }
actix = "0.13.5"
actix-rt = "2.10.0"
actix-web = "4.9.0"
actix-http = "3.9.0"
base58 = "0.2.0"
tokio-stream = "0.1"
alloy-consensus = { path = "./ext/alloy/crates/consensus", default-features = false }
alloy-core = { path = "./ext/alloy-core/crates/core" }
alloy-eips = { path = "./ext/alloy/crates/eips", default-features = false }
alloy-genesis = { path = "./ext/alloy/crates/genesis", default-features = false }
alloy-primitives = { path = "./ext/alloy-core/crates/primitives", features = ["arbitrary"] }
rand = "0.8"
hex = "0.4"
base64-url = "2"
alloy-rlp = "0.3.4"
alloy-rpc-types = { path = "./ext/alloy/crates/rpc-types" }
alloy-rpc-types-engine = { path = "./ext/alloy/crates/rpc-types-engine", features = ["serde"] }
clap = { version = "4", features = ["derive"] }
alloy-rpc-types-trace = { path = "./ext/alloy/crates/rpc-types-trace" }
reth-e2e-test-utils = { path = "./ext/reth/crates/e2e-test-utils" }
alloy-serde = { path = "./ext/alloy/crates/serde", default-features = false }
alloy-signer-local = { path = "./ext/alloy/crates/signer-local" }
alloy-sol-macro = { path = "./ext/alloy-core/crates/sol-macro", features = ["json"] }
alloy-sol-types = { path = "./ext/alloy-core/crates/sol-types" }
alloy-contract = { path = "./ext/alloy/crates/contract" }
alloy-provider = { path = "./ext/alloy/crates/provider", features = ["trace-api"] }

arbitrary = { version = "1.3", features = ["derive"] }
rstest = "0.25"
once_cell = "1"
assert_matches = "1"
bytes = "1.5"
derive_more = { version = "1", features = ["full"] }
eyre = "0.6"
color-eyre = "0.6"
itertools = "0.13"
futures = "0.3"
bytemuck = "1"
futures-concurrency = "7"
test-log = { version = "0.2", features = ["trace"] }

nodit = { version = "0.9", features = ["serde"] }
modular-bitfield = "0.11"
openssl = { version = "0.10", features = ["vendored"] }
proptest-derive = "0.5"
reth = { path = "./ext/reth/bin/reth" }
reth-auto-seal-consensus = { path = "./ext/reth/crates/consensus/auto-seal" }
reth-beacon-consensus = { path = "./ext/reth/crates/consensus/beacon" }
reth-blockchain-tree = { path = "./ext/reth/crates/blockchain-tree" }
reth-chainspec = { path = "./ext/reth/crates/chainspec" }
reth-cli = { path = "./ext/reth/crates/cli/cli" }
reth-cli-commands = { path = "./ext/reth/crates/cli/commands" }
reth-cli-runner = { path = "./ext/reth/crates/cli/runner" }
reth-cli-util = { path = "./ext/reth/crates/cli/util" }
reth-codecs = { path = "./ext/reth/crates/storage/codecs" }
reth-codecs-derive = { path = "./ext/reth/crates/storage/codecs/derive" }
reth-consensus = { path = "./ext/reth/crates/consensus/consensus" }
reth-config = { path = "./ext/reth/crates/config" }
reth-static-file = { path = "./ext/reth/crates/static-file/static-file" }
reth-prune = { path = "./ext/reth/crates/prune/prune" }
reth-stages = { path = "./ext/reth/crates/stages/stages" }
reth-evm = { path = "./ext/reth/crates/evm" }
reth-downloaders = { path = "./ext/reth/crates/net/downloaders" }
reth-consensus-debug-client = { path = "./ext/reth/crates/consensus/debug-client" }
reth-db = { path = "./ext/reth/crates/storage/db" }
reth-db-api = { path = "./ext/reth/crates/storage/db-api" }
reth-db-models = { path = "./ext/reth/crates/storage/db-models" }
reth-engine-service = { path = "./ext/reth/crates/engine/service" }
reth-engine-tree = { path = "./ext/reth/crates/engine/tree" }
reth-engine-util = { path = "./ext/reth/crates/engine/util" }
reth-ethereum-cli = { path = "./ext/reth/crates/ethereum/cli" }
reth-ethereum-engine-primitives = { path = "./ext/reth/crates/ethereum/engine-primitives" }
reth-exex = { path = "./ext/reth/crates/exex/exex" }
reth-network = { path = "./ext/reth/crates/net/network" }
reth-network-peers = { path = "./ext/reth/crates/net/peers" }
reth-network-api = { path = "./ext/reth/crates/net/network-api" }
reth-node-api = { path = "./ext/reth/crates/node/api" }
reth-node-builder = { path = "./ext/reth/crates/node/builder" }
reth-node-core = { path = "./ext/reth/crates/node/core" }
reth-node-ethereum = { path = "./ext/reth/crates/ethereum/node" }
reth-node-events = { path = "./ext/reth/crates/node/events" }
reth-node-metrics = { path = "./ext/reth/crates/node/metrics" }
reth-payload-primitives = { path = "./ext/reth/crates/payload/primitives" }
reth-primitives = { path = "./ext/reth/crates/primitives" }
reth-provider = { path = "./ext/reth/crates/storage/provider" }
reth-rpc-engine-api = { path = "./ext/reth/crates/rpc/rpc-engine-api" }
reth-rpc-eth-types = { path = "./ext/reth/crates/rpc/rpc-eth-types" }
reth-tasks = { path = "./ext/reth/crates/tasks" }
reth-tokio-util = { path = "./ext/reth/crates/tokio-util" }
reth-tracing = { path = "./ext/reth/crates/tracing" }
reth-rpc-types-compat = { path = "./ext/reth/crates/rpc/rpc-types-compat" }
reth-transaction-pool = { path = "./ext/reth/crates/transaction-pool" }
reth-stages-types = { path = "./ext/reth/crates/stages/types" }
alloy-network = { path = "./ext/alloy/crates/network" }
revm = { path = "./ext/revm/crates/revm", features = ["std", "serde-json"] }
revm-primitives = { path = "./ext/revm/crates/primitives" }
reth-payload-builder = { path = "./ext/reth/crates/payload/builder" }
rust_decimal = "1"
rust_decimal_macros = "1"
serde = { version = "1", default-features = false }
reth-rpc-layer = { path = "./ext/reth/crates/rpc/rpc-layer" }
serde_json = "1"
test-fuzz = "6"
thiserror = "1"
tokio = { version = "1", features = ["rt", "macros"] }
toml = "0.8"
derive-syn-parse = "0"
proc-macro2 = "1"
quote = "1"
semver = "1.0"
syn = { version = "2", features = ["full"] }
tracing = "0.1.0"
tracing-error = "0.2"
tracing-subscriber = { version = "0.3", default-features = false, features = ["env-filter", "fmt", "json", "ansi"] }
alloy-signer = { path = "./ext/alloy/crates/signer" }
tempfile = "3"
jsonrpsee = "0.24"
jsonrpsee-core = "0.24"
jsonrpsee-http-client = "0.24"
jsonrpsee-types = "0.24"
futures-util = "0.3"

[patch.crates-io]
revm = { path = "./ext/revm/crates/revm" }
revm-primitives = { path = "./ext/revm/crates/primitives" }

# alloy
alloy-consensus = { path = "./ext/alloy/crates/consensus" }
alloy-contract = { path = "./ext/alloy/crates/contract" }
alloy-eips = { path = "./ext/alloy/crates/eips" }
alloy-genesis = { path = "./ext/alloy/crates/genesis" }
alloy-json-rpc = { path = "./ext/alloy/crates/json-rpc" }
alloy-network = { path = "./ext/alloy/crates/network" }
alloy-network-primitives = { path = "./ext/alloy/crates/network-primitives" }
alloy-provider = { path = "./ext/alloy/crates/provider" }
alloy-pubsub = { path = "./ext/alloy/crates/pubsub" }
alloy-rpc-client = { path = "./ext/alloy/crates/rpc-client" }
alloy-rpc-types = { path = "./ext/alloy/crates/rpc-types" }
alloy-rpc-types-admin = { path = "./ext/alloy/crates/rpc-types-admin" }
alloy-rpc-types-anvil = { path = "./ext/alloy/crates/rpc-types-anvil" }
alloy-rpc-types-beacon = { path = "./ext/alloy/crates/rpc-types-beacon" }
alloy-rpc-types-debug = { path = "./ext/alloy/crates/rpc-types-debug" }
alloy-rpc-types-engine = { path = "./ext/alloy/crates/rpc-types-engine" }
alloy-rpc-types-eth = { path = "./ext/alloy/crates/rpc-types-eth" }
alloy-rpc-types-mev = { path = "./ext/alloy/crates/rpc-types-mev" }
alloy-rpc-types-trace = { path = "./ext/alloy/crates/rpc-types-trace" }
alloy-rpc-types-txpool = { path = "./ext/alloy/crates/rpc-types-txpool" }
alloy-serde = { path = "./ext/alloy/crates/serde" }
alloy-signer = { path = "./ext/alloy/crates/signer" }
alloy-signer-local = { path = "./ext/alloy/crates/signer-local" }
alloy-transport = { path = "./ext/alloy/crates/transport" }
alloy-transport-http = { path = "./ext/alloy/crates/transport-http" }
alloy-transport-ws = { path = "./ext/alloy/crates/transport-ws" }

# alloy-core
alloy-core = { path = "./ext/alloy-core/crates/core" }
alloy-dyn-abi = { path = "./ext/alloy-core/crates/dyn-abi" }
alloy-json-abi = { path = "./ext/alloy-core/crates/json-abi" }
alloy-primitives = { path = "./ext/alloy-core/crates/primitives" }
alloy-sol-macro = { path = "./ext/alloy-core/crates/sol-macro" }
alloy-sol-macro-expander = { path = "./ext/alloy-core/crates/sol-macro-expander" }
alloy-sol-macro-input = { path = "./ext/alloy-core/crates/sol-macro-input" }
alloy-sol-type-parser = { path = "./ext/alloy-core/crates/sol-type-parser" }
alloy-sol-types = { path = "./ext/alloy-core/crates/sol-types" }
syn-solidity = { path = "./ext/alloy-core/crates/syn-solidity" }

[profile.dev]
panic = "unwind"

[workspace.lints]
rust.missing_debug_implementations = "warn"
# rust.missing_docs = "warn" # disable for now until we can fix all the warnings
rust.rust_2018_idioms = { level = "deny", priority = -1 }
rust.unreachable_pub = "warn"
rust.unused_must_use = "deny"
rust.unused_imports = "warn"
# rustdoc.all = "warn"
# rust.unnameable-types = "warn"

[workspace.lints.clippy]
cargo = { priority = -1, level = "warn" }
complexity = { priority = -2, level = "warn" }
perf = { priority = -3, level = "warn" }
correctness = { priority = -4, level = "warn" }
restriction = { priority = -5, level = "warn" }
style = { priority = -6, level = "warn" }
suspicious = { priority = -7, level = "warn" }
pedantic = { priority = -8, level = "warn" }
nursery = { priority = -9, level = "warn" }

cargo_common_metadata = "allow"
pattern_type_mismatch = "allow"
missing_docs_in_private_items = "allow"
blanket_clippy_restriction_lints = "allow"
implicit_return = "allow"
dbg_macro = "allow"
single_call_fn = "allow"
missing_inline_in_public_items = "allow"
question_mark_used = "allow"
absolute_paths = "allow"
missing_trait_methods = "allow"
wildcard_imports = "allow"
shadow_reuse = "allow"
exhaustive_enums = "allow"
ref_patterns = "allow"
pub_use = "allow"
single_char_lifetime_names = "allow"
multiple_crate_versions = "allow"
exhaustive_structs = "allow"
separated_literal_suffix = "allow"
mod_module_files = "allow"
negative_feature_names = "allow"
std_instead_of_alloc = "allow"
expect_used = "allow"
pub_with_shorthand = "allow"
option_if_let_else = "allow"
self_named_module_files = "allow"
shadow_unrelated = "allow"
arbitrary_source_item_ordering = "allow"

# These are some of clippy's nursery (i.e., experimental) lints that we like.
# By default, nursery lints are allowed. Some of the lints below have made good
# suggestions which we fixed. The others didn't have any findings, so we can
# assume they don't have that many false positives. Let's enable them to
# prevent future problems.
borrow_as_ptr = "warn"
branches_sharing_code = "warn"
clear_with_drain = "warn"
cloned_instead_of_copied = "warn"
collection_is_never_read = "warn"
derive_partial_eq_without_eq = "warn"
doc_markdown = "warn"
empty_line_after_doc_comments = "warn"
empty_line_after_outer_attr = "warn"
enum_glob_use = "warn"
equatable_if_let = "warn"
explicit_into_iter_loop = "warn"
explicit_iter_loop = "warn"
flat_map_option = "warn"
if_not_else = "warn"
implicit_clone = "warn"
imprecise_flops = "warn"
iter_on_empty_collections = "warn"
iter_on_single_items = "warn"
iter_with_drain = "warn"
iter_without_into_iter = "warn"
large_stack_frames = "warn"
manual_assert = "warn"
manual_clamp = "warn"
manual_is_variant_and = "warn"
manual_string_new = "warn"
match_same_arms = "warn"
missing_const_for_fn = "warn"
mutex_integer = "warn"
naive_bytecount = "warn"
needless_bitwise_bool = "warn"
needless_continue = "warn"
needless_for_each = "warn"
needless_pass_by_ref_mut = "warn"
nonstandard_macro_braces = "warn"
option_as_ref_cloned = "warn"
or_fun_call = "warn"
path_buf_push_overwrite = "warn"
read_zero_byte_vec = "warn"
redundant_clone = "warn"
redundant_else = "warn"
single_char_pattern = "warn"
string_lit_as_bytes = "warn"
string_lit_chars_any = "warn"
suboptimal_flops = "warn"
suspicious_operation_groupings = "warn"
trailing_empty_array = "warn"
trait_duplication_in_bounds = "warn"
transmute_undefined_repr = "warn"
trivial_regex = "warn"
tuple_array_conversions = "warn"
type_repetition_in_bounds = "warn"
uninhabited_references = "warn"
unnecessary_self_imports = "warn"
unnecessary_struct_initialization = "warn"
unnested_or_patterns = "warn"
unused_peekable = "warn"
unused_rounding = "warn"
use_self = "warn"
useless_let_if_seq = "warn"
while_float = "warn"
zero_sized_map_values = "warn"

# These are nursery lints which have findings. Allow them for now. Some are not
# quite mature enough for use in our codebase and some we don't really want.
# Explicitly listing should make it easier to fix in the future.
as_ptr_cast_mut = "allow"
cognitive_complexity = "allow"
debug_assert_with_mut_call = "allow"
fallible_impl_from = "allow"
future_not_send = "allow"
needless_collect = "allow"
non_send_fields_in_send_ty = "allow"
redundant_pub_crate = "allow"
significant_drop_in_scrutinee = "allow"
significant_drop_tightening = "allow"
too_long_first_doc_paragraph = "allow"

[workspace.metadata.cargo-machete]
ignored = ["modular-bitfield", "test-fuzz"]

# https://github.com/crate-ci/typos/blob/master/docs/reference.md
[workspace.metadata.typos]
default.extend-ignore-re = [
  "(?Rm)^.*(#|//)\\s*spellchecker:disable-line$", # disable a single line: spellchecker:disable-line
  "(?s)(#|//)\\s*spellchecker:off.*?\\n\\s*(#|//)\\s*spellchecker:on", # disable blocks of lines: spellchecker:<on|off>
]
files.extend-exclude = ["ext/*", "fixtures/*"]
